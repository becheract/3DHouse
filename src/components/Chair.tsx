/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.2 chair.glb 
*/

import React, { useEffect } from "react";
import { useGLTF } from "@react-three/drei";
import * as THREE from "three";
import { useBox } from "@react-three/cannon"; // Import Cannon.js hook

export default function Model(props: JSX.IntrinsicElements["group"]) {
  const { nodes, materials } = useGLTF("Chair/chair.glb");

  const [ref, api] = useBox<THREE.Group>(() => ({
    mass: 1, // Assign mass for the object to make it moveable
    position: [0, 0, 0], // Initial position
    rotation: [0, 0, 0],
    args: [1, 1, 1], // Adjust the size based on the object
  }));

  useEffect(() => {
    // Loop through all materials and set NearestFilter for their textures
    Object.values(materials).forEach((material: THREE.Material) => {
      if (
        material instanceof THREE.MeshBasicMaterial ||
        material instanceof THREE.MeshStandardMaterial
      ) {
        if (material.map) {
          material.map.minFilter = THREE.NearestFilter;
          material.map.magFilter = THREE.NearestFilter;
          material.map.needsUpdate = true;
        }
      }
    });
  }, [materials]);

  return (
    <group {...props} dispose={null} >
      <group ref={ref}>
        <mesh
          geometry={(nodes.Cylinder047 as THREE.Mesh).geometry}
          material={materials["Material.010"]}
        />
        <mesh
          geometry={(nodes.Cylinder047_1 as THREE.Mesh).geometry}
          material={materials.Fabric}
        />
      </group>
    </group>
  );
}

useGLTF.preload("/chair.glb");
