/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 phone.glb 
*/

import React ,{ useEffect, useRef,useMemo, useState, act} from 'react'
import { useGraph, useThree } from '@react-three/fiber'
import { useGLTF, useAnimations } from '@react-three/drei'
import { SkeletonUtils } from 'three-stdlib'
import * as THREE from "three";
import { QuaternionKeyframeTrack, VectorKeyframeTrack } from 'three';
import Debounce from '../utils/Debounce';
import shaderMaterialTransformer from "./../../shaders/shaderMaterialTransformer"
import { Canvas } from "@react-three/fiber";

interface AnimationClip {
  name: string;
  tracks: Array<VectorKeyframeTrack | QuaternionKeyframeTrack>;
  openModal: (ref: THREE.Mesh, text: string, tag: string | null) => void;
  duration: number;
  blendMode: number;
  uuid: string;
}

// Extend the props to include AnimationClip
interface ModelProps extends React.ComponentPropsWithoutRef<"group"> {
  animationClip: AnimationClip; // Add AnimationClip to the props
}

export default function Model(props: ModelProps) {
  const group = useRef<THREE.Group>(null);
  const { scene, animations } = useGLTF("Phone/phone-transformed.glb");
  const clone = useMemo(() => SkeletonUtils.clone(scene), [scene]);
  const { nodes, materials } = useGraph(clone);
  const { camera } = useThree();
  const phoneRef = useRef<THREE.Group>(null);
  const { actions, mixer } = useAnimations(animations, clone);

  const [isOverlayVisible, setOverlayVisible] = useState(false);


  const disapearPhone = Debounce((e: MouseEvent) => {
    if(phoneRef.current !== null) {
      if (actions["closeAction"]) {

        actions["closeAction"].fadeIn(0.5).play();
        actions["closeAction"].repetitions = 1;

        mixer.stopAllAction();

      }
      phoneRef.current.visible = false

    }
  }, 4000)

  useEffect(() => {
    const phoneMat = materials["'Material.001'"] as THREE.MeshBasicMaterial;
    // Loop through all materials and set NearestFilter for their textures
    Object.values(materials).forEach((material: THREE.Material) => {
      if (
        material instanceof THREE.MeshBasicMaterial ||
        material instanceof THREE.MeshStandardMaterial
      ) {
        if (material.map) {
          material.map.minFilter = THREE.NearestFilter;
          material.map.magFilter = THREE.NearestFilter;
          material.map.needsUpdate = true;
        }
      }
   
    });

  }, [materials])

  useEffect(() => {
    const keyDownListener = (e: KeyboardEvent) => {
      

      if (e.key === "c" || e.key === "C" ) {
        if(phoneRef.current !== null){
          phoneRef.current.visible = true
          // Set the phone's position in front of the camera
          // Assuming the camera's forward direction is along the Z axis
          const cameraPosition = camera.position.clone();
          const cameraDirection = camera.getWorldDirection(new THREE.Vector3());
          
          // Offset the phone's position in front of the camera
          // Adjust the distance based on how far in front you want it to appear
          const offset = new THREE.Vector3(0, 0, 0.7);  // 1 unit in front of the camera
          phoneRef.current.position.copy(cameraPosition.add(cameraDirection.multiplyScalar(offset.z)));
          // Adjust the y-axis separately (to move the phone higher or lower)
          const yOffset = -0.50;  // Move the phone 1 unit up on the Y axis
          phoneRef.current.position.y += yOffset;  // Add this offset to the Y position
          // Optionally adjust the orientation of the phone based on camera orientation
          phoneRef.current.rotation.copy(camera.rotation);

          if (actions["openAction"]) {
            mixer.stopAllAction();
            console.log('try')
            console.log(actions["openAction"])
            actions["openAction"]
            .reset()
            .setLoop(THREE.LoopOnce, 1)
            .fadeIn(0.5)
            .play();

            props.animationClip.openModal(
              phoneRef.current as unknown as THREE.Mesh,
              "Contact Information",
              null
            );
            
            if(actions["openAction"].isRunning() == false){
            disapearPhone()
            }
          }

        }
        
      }


    };

    document.addEventListener("keydown", keyDownListener);
    return () => {
   
      document.removeEventListener("keydown", keyDownListener);
    };
  }, [camera, actions, mixer, props.animationClip])

  useEffect(() => {
    const keyDownListener = (e: KeyboardEvent) => {
      if (e.key === "z" || e.key === "Z" ) {
        console.log('inside func')
        console.log(actions)
    if (actions.openAction) {
      console.log('inside')
      actions.openAction.play();
      actions.openAction.repetitions = 1;
      mixer.stopAllAction();
    }
    }
  }
    document.addEventListener("keydown", keyDownListener);
    return () => {

      document.removeEventListener("keydown", keyDownListener);
    };


  })

  return (
    <>
    <group  ref={phoneRef} {...props} dispose={null} >
      <group name="Scene" >
        <group name="Armature" position={[0, 0.179, 0]} scale={[0.99, 2.207, 2.207]} rotation={[0,-1.6,0]}>
          <primitive  object={clone} />
          <skinnedMesh name="Cube" geometry={(nodes.Cube as THREE.Mesh).geometry} material={materials['Material.001']} skeleton={(nodes.Cube as THREE.SkinnedMesh).skeleton} />
          <skinnedMesh name="Cube001" geometry={(nodes.Cube001 as THREE.Mesh).geometry} material={materials['Material.001']} skeleton={(nodes.Cube001 as THREE.SkinnedMesh).skeleton} />
        </group>
      </group>
    </group>

      </>
  )
}


const overlayStyle: React.CSSProperties = {
  position: "fixed",
  top: 0,
  left: 0,
  width: "100%",
  height: "100%",
  backgroundColor: "rgba(0, 0, 0, 0.8)",
  display: "flex",
  justifyContent: "center",
  alignItems: "center",
  flexDirection: "column",
  zIndex: 10,
};

const modalStyle: React.CSSProperties = {
  backgroundColor: "rgba(14,13,13, 0.8)",
  color: "#fff",
  padding: "20px",
  width: "80%",
  textAlign: "center",
  fontFamily: "Geo, sans-serif",
  fontWeight: 400,
  fontStyle: "normal",
};


useGLTF.preload('/phone.glb')
