/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.2 Shelf.glb 
*/

import React, { useEffect, useRef } from "react";
import { useGLTF } from "@react-three/drei";
import * as THREE from "three";
import { vertexShader } from "../../shaders/vertexShader";
import { fragmentShader } from "../../shaders/fragmentShader";

export default function Model(props: JSX.IntrinsicElements["group"]) {
  const { nodes, materials } = useGLTF("Shelf/Shelf.glb");
  const material = materials.Fitment_02 as THREE.MeshBasicMaterial; // Cast to appropriate type
  const shelfRef = useRef<THREE.Mesh>(null!);

  useEffect(() => {
    const shaderMaterial = new THREE.ShaderMaterial({
      uniforms: {
        map: { value: material.map }, // No texture for the frame, adjust if needed
        uvScale: { value: 4.2 }, // Control UV scaling if necessary
        uvOffset: { value: 1 },
        uJitterLevel: { value: 50 },
      },
      vertexShader: vertexShader,
      fragmentShader: fragmentShader,
    });

    // Loop through all materials and set NearestFilter for their textures
    Object.values(materials).forEach((material: THREE.Material) => {
      if (
        material instanceof THREE.MeshBasicMaterial ||
        material instanceof THREE.MeshStandardMaterial
      ) {
        if (material.map) {
          material.map.minFilter = THREE.NearestFilter;
          material.map.magFilter = THREE.NearestFilter;
          material.map.needsUpdate = true;
        }
      }
    });

    // if (shelfRef.current) {
    //   shelfRef.current.material = shaderMaterial;
    // }
  }, [materials]);

  useEffect(() => {
    if (shelfRef.current) {
      const geometry = shelfRef.current.geometry;
      // console.log(geometry.attributes.uv); // Check UVs in the console
    }
  }, []);

  return (
    <group {...props} dispose={null}>
      <mesh
        ref={shelfRef}
        geometry={(nodes.Fitment_02 as THREE.Mesh).geometry}
        material={materials.Fitment_02}
        position={[-17.708, 0.892, 4.191]}
      />
    </group>
  );
}

useGLTF.preload("/Shelf.glb");
