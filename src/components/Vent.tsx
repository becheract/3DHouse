/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.2 Vent.glb 
*/

import React, { useEffect, useRef, useState } from "react";
import { useGLTF } from "@react-three/drei";
import * as THREE from "three";
import { vertexShader } from "../../shaders/vertexShader";
import { fragmentShader } from "../../shaders/fragmentShader";

export default function Model(props: JSX.IntrinsicElements["group"]) {
  const { nodes, materials } = useGLTF("Vent/Vent.glb");

  const ventRef = useRef<THREE.Mesh>(null!);
  useEffect(() => {
    const ventMaterial = materials.Ventilator as THREE.MeshBasicMaterial;

    const shaderMaterial = new THREE.ShaderMaterial({
      uniforms: {
        map: { value: ventMaterial.map }, // No texture for the frame, adjust if needed
        uvScale: { value: 4 }, // Control UV scaling if necessary
        uJitterLevel: { value: 100 },
      },
      vertexShader: vertexShader,
      fragmentShader: fragmentShader,
    });

    // Set nearest filter for all materials of the model
    Object.values(materials).forEach((material: THREE.Material) => {
      if (
        material instanceof THREE.MeshBasicMaterial ||
        material instanceof THREE.MeshStandardMaterial
      ) {
        if (material.map) {
          material.map.minFilter = THREE.NearestFilter;
          material.map.magFilter = THREE.NearestFilter;
          material.map.wrapS = THREE.RepeatWrapping;
          material.map.wrapT = THREE.RepeatWrapping;
          material.map.repeat.set(1, 1);
          material.map.needsUpdate = true;
        }
      }
    });

    if (ventRef.current) {
      ventRef.current.material = shaderMaterial;
    }
  }, [materials]);

  return (
    <group {...props} dispose={null}>
      <mesh
        ref={ventRef}
        geometry={(nodes.Ventilator as THREE.Mesh).geometry}
        material={materials.Ventilator}
        position={[-13.143, -0.063, 0.571]}
        scale={0.635}
      />
    </group>
  );
}

useGLTF.preload("/Vent.glb");
