/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.2 garbage.glb 
*/

import React, { useEffect,useRef } from "react";
import { useGLTF } from "@react-three/drei";
import * as THREE from "three";
import shaderMaterialTransformer from "./../../shaders/shaderMaterialTransformer"

export default function Model(props: JSX.IntrinsicElements["group"]) {
  const { nodes, materials } = useGLTF("Garbage/garbage.glb");

  const garbagePlasticRef = useRef<THREE.Mesh>(null!);
  const garbageContainerRef = useRef<THREE.Mesh>(null!)
  useEffect(() => {
    const garbagePlasticMaterial = materials.Plastic as THREE.MeshBasicMaterial;
    const garbageContainerMaterial = materials["Material.010"] as THREE.MeshBasicMaterial;
    // Loop through all materials and set NearestFilter for their textures
    Object.values(materials).forEach((material: THREE.Material) => {
      if (
        material instanceof THREE.MeshBasicMaterial ||
        material instanceof THREE.MeshStandardMaterial
      ) {
        if (material.map) {
          material.map.minFilter = THREE.NearestFilter;
          material.map.magFilter = THREE.NearestFilter;
          material.map.needsUpdate = true;
        }
      }
    });

    if(garbagePlasticRef.current) {
      garbagePlasticRef.current.material = shaderMaterialTransformer(garbagePlasticMaterial, 2)
    }

    if(garbageContainerRef.current){
      garbageContainerRef.current.material = shaderMaterialTransformer(garbageContainerMaterial, 1)
    }
  }, [materials]);

  return (
    <group {...props} dispose={null}>
      <group position={[-24.016, -1.921, 25.199]}>
        <mesh
        // ref={garbageContainerRef}
          geometry={(nodes.Cube178 as THREE.Mesh).geometry}
          material={materials["Material.010"]}
        />
        <mesh
        ref={garbagePlasticRef}
          geometry={(nodes.Cube178_1 as THREE.Mesh).geometry}
          material={materials.Plastic}
        />
      </group>
    </group>
  );
}

useGLTF.preload("/garbage.glb");
