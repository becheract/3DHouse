/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.2 fan.glb 
*/

import { useGLTF } from "@react-three/drei";
import * as THREE from "three";
import { useFrame } from "@react-three/fiber";
import { useRef, useEffect } from "react";

export default function Model(props: JSX.IntrinsicElements["group"]) {
  const { nodes, materials } = useGLTF("Fan/fan.glb");
  const ref = useRef<THREE.Mesh>(null);

  useFrame(() => {
    if (ref.current) {
      ref.current.rotation.y += 0.02;
    }
  });

  useEffect(() => {
    // Loop through all materials and set NearestFilter for their textures
    Object.values(materials).forEach((material: THREE.Material) => {
      if (
        material instanceof THREE.MeshBasicMaterial ||
        material instanceof THREE.MeshStandardMaterial
      ) {
        if (material.map) {
          material.map.minFilter = THREE.NearestFilter;
          material.map.magFilter = THREE.NearestFilter;
          material.map.needsUpdate = true;
        }
      }
    });
  }, [materials]);

  return (
    <group {...props} dispose={null}>
      <mesh
        receiveShadow
        geometry={(nodes.Ceiling_Fan as THREE.Mesh).geometry}
        material={materials.Ceiling_Fan}
        position={[-16.621, 0.679, -3.858]}
        rotation={[0, Math.PI / 4, 0]}
        scale={0.797}
      ></mesh>
      <mesh
        ref={ref}
        receiveShadow
        geometry={(nodes.Ceiling_Fan_Blades as THREE.Mesh).geometry}
        material={materials.Ceiling_Fan}
        position={[-16.621, 0.51, -3.858]}
        rotation={[-Math.PI, 0.478, -Math.PI]}
        scale={0.797}
      ></mesh>
    </group>
  );
}

useGLTF.preload("/fan.glb");
