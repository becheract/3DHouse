/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.2 sofa.glb 
*/

import React, { useEffect, useRef } from "react";
import { useGLTF } from "@react-three/drei";
import * as THREE from "three";
import { vertexShader } from "../../shaders/vertexShader";
import { fragmentShader } from "../../shaders/fragmentShader";

export default function Model(props: JSX.IntrinsicElements["group"]) {
  const { nodes, materials } = useGLTF("Sofa/sofa.glb");

  const sofaWoodRef = useRef<THREE.Mesh>(null!);
  const sofaMatRef = useRef<THREE.Mesh>(null!);

  useEffect(() => {
    const woodMaterial = materials.Wood_10 as THREE.MeshBasicMaterial; // Cast to appropriate type
    const fabricMaterial = materials.Fabric_11 as THREE.MeshBasicMaterial; // Cast to appropriate type
    // Create the ShaderMaterial for the TV frame (or model)
    const shaderMaterial = new THREE.ShaderMaterial({
      uniforms: {
        map: { value: woodMaterial.map }, // No texture for the frame, adjust if needed
        uvScale: { value: 95 }, // Control UV scaling if necessary
        uJitterLevel: { value: 70 },
      },
      vertexShader: vertexShader,
      fragmentShader: fragmentShader,
    });

    const shaderFMaterial = new THREE.ShaderMaterial({
      uniforms: {
        map: { value: fabricMaterial.map }, // No texture for the frame, adjust if needed
        uvScale: { value: 3 }, // Control UV scaling if necessary
      },
      vertexShader: vertexShader,
      fragmentShader: fragmentShader,
    });

    // Loop through all materials and set NearestFilter for their textures
    Object.values(materials).forEach((material: THREE.Material) => {
      if (
        material instanceof THREE.MeshBasicMaterial ||
        material instanceof THREE.MeshStandardMaterial
      ) {
        if (material.map) {
          material.map.minFilter = THREE.NearestFilter;
          material.map.magFilter = THREE.NearestFilter;
          material.map.needsUpdate = true;
        }
      }
    });

    if (sofaWoodRef.current) {
      sofaWoodRef.current.material = shaderMaterial;
    }
    if (sofaMatRef.current) {
      sofaMatRef.current.material = shaderFMaterial;
    }
  }, [materials]);

  return (
    <group {...props} dispose={null}>
      <group position={[10.876, 0.177, -3.175]}>
        <mesh
         receiveShadow
          ref={sofaWoodRef}
          geometry={(nodes.Armchair_08_1 as THREE.Mesh).geometry}
          material={materials.Wood_10}
        />
        <mesh
        
          ref={sofaMatRef}
          geometry={(nodes.Armchair_08_2 as THREE.Mesh).geometry}
          material={materials.Fabric_11}
        />
      </group>
    </group>
  );
}

useGLTF.preload("/sofa.glb");
