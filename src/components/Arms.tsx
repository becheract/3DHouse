/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.2 Arms.glb 
*/

import { useRef, useEffect, useMemo,useState } from "react";
import { useGraph, useThree } from "@react-three/fiber";
import { useGLTF, useAnimations } from "@react-three/drei";
import { SkeletonUtils } from "three-stdlib";
import * as THREE from "three";
import { TextureLoader, NearestFilter, LinearMipMapLinearFilter } from "three";
import { usePlayerControls } from "../utils/helpers";

export default function Model(props: JSX.IntrinsicElements["group"]) {
  const group = useRef<THREE.Group>(null);
  const { scene, animations } = useGLTF("Arms/Arms.glb");
  const clone = useMemo(() => SkeletonUtils.clone(scene), [scene]);
  const { nodes, materials } = useGraph(clone);
  const [ firstLoad, setFirstLoad] = useState(true);
  const { actions, names, mixer } = useAnimations(animations, group);

  const { camera } = useThree(); // Access the scene's camera
  const armRef = useRef<THREE.Group>(null!);

  useEffect(() => {
    if (armRef.current) {
      // Set arms as a child of the camera, so they move with it
      camera.add(armRef.current);

      if (armRef.current !== undefined) {
        // Position the arms in front of the camera (adjust as needed)
        armRef.current.position.set(0, -0.5, -1); // Fine-tune position to make it look realistic
        armRef.current.rotation.set(0, 0, 0); // Adjust rotation if needed
      }

      return () => {
        camera.remove(armRef.current); // Cleanup: remove from camera on unmount
      };
    }
  }, [camera]);

  useEffect(() => {
    console.log('names')
    console.log(names)
    if(actions.Relax_hands_idle_start !== null && firstLoad == true){
        console.log('first load?')
        actions.Relax_hands_idle_start.play()
        actions.Relax_hands_idle_start.repetitions = 1;
        mixer.stopAllAction();
        actions.Relax_hands_idle_start.reset().play()
    }
  }, [actions, scene])

  useEffect(() => {
    const playIdle = () => {
      mixer.stopAllAction();
      if(actions.Relax_hands_idle_loop){
        actions.Relax_hands_idle_loop.play();
      }
    };
    mixer.addEventListener('finished', playIdle);
    return () => {
      mixer.removeEventListener('finished', playIdle);
    }
  }, [mixer])


  useEffect(() => {
    const keyDownListener = (e: KeyboardEvent) => {
        if (e.key === "f" || e.key === "F") {
          if(actions.Collect_something){
            actions.Collect_something.play();
            actions.Collect_something.repetitions = 1;
            mixer.stopAllAction();
            actions.Collect_something.reset().play()
          }
        }
    };

        // Register key event listener once on mount
        document.addEventListener("keydown", keyDownListener);
        return () => {
          document.removeEventListener("keydown", keyDownListener);
        };


  },[])


  useEffect(() => {
    // Loop through all materials and set NearestFilter for their textures
    Object.values(materials).forEach((material: THREE.Material) => {
      if (
        material instanceof THREE.MeshBasicMaterial ||
        material instanceof THREE.MeshStandardMaterial
      ) {
        if (material.map) {
          material.map.minFilter = THREE.NearestFilter;
          material.map.magFilter = THREE.NearestFilter;
          material.map.needsUpdate = true;
        }
      }
    });
  }, [materials]);

  return (
    <group ref={group} {...props} dispose={null} >
      <group name="Scene">
        <group name="arms_armature">
          <primitive object={nodes.spine002} />
          <primitive object={nodes.ik_handL} />
          <primitive object={nodes.ik_handR} />
          <skinnedMesh
            name="arms"
            geometry={(nodes.arms as THREE.Mesh).geometry}
            material={materials.arms}
            skeleton={(nodes.arms as THREE.SkinnedMesh).skeleton}
          />
        </group>
      </group>
    </group>
  );
}

useGLTF.preload("/Arms.glb");
